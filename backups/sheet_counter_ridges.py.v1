#!/usr/bin/env python3
"""
sheet_counter_ridges.py

POC to count corrugated sheets by detecting horizontal ridges (sheet edges).
"""

import cv2
import numpy as np
import glob, os
from scipy.signal import find_peaks

# PARAMETERS
SOBEL_KSIZE       = 3         # kernel size for vertical Sobel
EDGE_THRESH       = 50        # threshold to binarize Sobel output
PEAK_PROMINENCE   = 0.3       # fraction of max for peak prominence
SMOOTH_WINDOW     = 15        # rows for moving-average smoothing
IMG_EXTENSIONS    = ('*.jpg','*.jpeg','*.png')

def load_and_preprocess(path):
    img  = cv2.imread(path)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    clahe= cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))
    eq   = clahe.apply(gray)
    return cv2.GaussianBlur(eq,(5,5),0)

def count_by_ridges(img):
    # 1. Vertical Sobel → highlights horizontal edges
    sob = cv2.Sobel(img, cv2.CV_64F, dx=0, dy=1, ksize=SOBEL_KSIZE)
    abs_sob = np.absolute(sob).astype(np.uint8)
    # 2. Threshold to binary
    _, bw = cv2.threshold(abs_sob, EDGE_THRESH, 255, cv2.THRESH_BINARY)
    # 3. Sum across columns → one value per row
    row_sum = bw.sum(axis=1)
    # 4. Smooth the 1D signal
    window = np.ones(SMOOTH_WINDOW)/SMOOTH_WINDOW
    smooth = np.convolve(row_sum, window, mode='same')
    # 5. Detect peaks: height > some fraction of max, separated by min distance
    height = SMOOTH_WINDOW * 255 * img.shape[1] * PEAK_PROMINENCE
    peaks, _ = find_peaks(smooth, height=height, distance=SMOOTH_WINDOW)
    return len(peaks), bw, smooth, peaks

def process_dir(name, directory):
    paths = sorted(sum([glob.glob(os.path.join(directory, ext)) 
                        for ext in IMG_EXTENSIONS], []))
    print(f"\nProcessing {len(paths)} images in {name}")
    total = 0
    for p in paths:
        img = load_and_preprocess(p)
        count, bw, smooth, peaks = count_by_ridges(img)
        total += count
        print(f"  {os.path.basename(p):30} → {count} sheets")
        # Optional debugging visuals:
        # cv2.imwrite(f"dbg/{name}_{os.path.basename(p)}_edges.png", bw)
        # np.savetxt(f"dbg/{name}_{os.path.basename(p)}_signal.csv", smooth, delimiter=",")
    print(f"Subtotal {name}: {total}\n")
    return total

if __name__ == "__main__":
    import argparse
    p = argparse.ArgumentParser(__doc__)
    p.add_argument("--wrap_dir",   required=True)
    p.add_argument("--unwrap_dir", required=True)
    args = p.parse_args()

    w = process_dir("Wrapped",   args.wrap_dir)
    u = process_dir("Unwrapped", args.unwrap_dir)
    print("="*40)
    print(f"GRAND TOTAL: {w + u} sheets")

